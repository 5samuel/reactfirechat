{"version":3,"sources":["components/Button.js","config/firebase.js","components/Message.js","components/Channel.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","class","src","alt","className","width","height","seconds","Channel","user","useState","messages","setMessages","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","name","content","message","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","disabled","xmlns","fill","viewBox","d","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","signOut","useAuthState","initializing","setInitializing","currentUser","setUser","onAuthStateChanged","App","renderLoading","href","rel","integrity","crossorigin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5308c9c2.chunk.js","sourcesContent":["const Button = ({\r\n    onClick = null,\r\n    children = null\r\n}) =>\r\n(\r\n    <button onClick={onClick} >{children} </button>\r\n);\r\n\r\nexport default Button;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore'; \r\n\r\n\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyCuv20rYX56P_SSYw75gOD_vpingNgfrBo\",\r\n    authDomain: \"firechat-test-1fd35.firebaseapp.com\",\r\n    projectId: \"firechat-test-1fd35\",\r\n    storageBucket: \"firechat-test-1fd35.appspot.com\",\r\n    messagingSenderId: \"648296366926\",\r\n    appId: \"1:648296366926:web:0636dccfa7e222ff24141f\",\r\n    measurementId: \"G-5E8TSXS2J5\"\r\n  };\r\n  \r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst db = firebase.firestore();\r\nconst googleAuthProvider= new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {\r\n    db,\r\n    googleAuthProvider,\r\n    firebase\r\n}\r\n\r\n\r\n\r\n\r\n","import { formatRelative } from 'date-fns';\r\n\r\n\r\nconst formatDate = date => {\r\n    let formattedDate = '';\r\n    if (date) {\r\n        // Convert the date in words relative to the current date\r\n        formattedDate = formatRelative(date, new Date());\r\n        // Uppercase the first letter\r\n        formattedDate =\r\n            formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n    }\r\n    return formattedDate;\r\n};\r\n\r\n\r\n// Message.js\r\nconst Message = ({\r\n    createdAt = null,\r\n    text = '',\r\n    displayName = '',\r\n    photoURL = '',\r\n}) => {\r\n    if (!text) return null;\r\n   \r\n\r\n   \r\n   \r\n    \r\n    return (// devuelve los mensajes con el nombre de del usuario y imagen del perfil.\r\n        <div class=\"todo\">\r\n            \r\n            {photoURL ? (// imagen del perfil\r\n                <img\r\n                    src={photoURL}\r\n                    alt=\"Avatar\"\r\n                    className=\"rounded-full mr-4\"\r\n                    width={45}\r\n                    height={45}\r\n                />\r\n            ) : null}\r\n            \r\n                    {displayName ? <p >{displayName}</p> : null}\r\n            {createdAt?.seconds ? (\r\n                <span>{formatDate(new Date(createdAt.seconds * 1000))}</span>\r\n            ) : null}\r\n            <div class=\"text\"><p class=\"hola\">{text}</p></div>\r\n             \r\n \r\n        </div>\r\n        \r\n    );;\r\n};\r\n\r\n\r\nexport default Message;","import { useEffect, useState, useRef } from 'react';\r\nimport { db, firebase } from '../config/firebase';\r\nimport Message from './Message';\r\nimport '../style/style.css';\r\n\r\n\r\nconst Channel = ({ user = null }) => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    //Necesito cargar los mensajes desde la BD.\r\n    useEffect(() => {\r\n        /* \r\n            Crear el query de los mensajes.\r\n            Cargar 100 mensajes ordenados por fecha.\r\n        */\r\n        const query = db.collection('messages')\r\n            .orderBy('createdAt')\r\n            .limit(100);\r\n\r\n        const unsubscribe = query.onSnapshot(querySnapshot => {\r\n            //Obtiene todos los mensajes desde la bd con su ID.\r\n            const data = querySnapshot.docs.map(doc => ({\r\n                ...doc.data(),\r\n                id: doc.id,\r\n            }));\r\n            //mensaje de alerta\r\n            \r\n            // Actualizo los mensjaes obtenidos desde la bd. \r\n            setMessages(data);\r\n\r\n        });\r\n        //CleanUp\r\n        return unsubscribe;\r\n\r\n    }, [])\r\n\r\n\r\n    //Codigo para agregar nuevos mensajes\r\n    const { uid, displayName, photoURL } = user;\r\n    const [newMessage, setNewMessage] = useState('');\r\n\r\n    const handleMessageOnChange = (e) => {\r\n        e.preventDefault();\r\n        setNewMessage(e.target.value);\r\n    }\r\n\r\n\r\n    const messagesRef = db.collection('messages');\r\n\r\n\r\n    const handleOnSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const trimmedMessage = newMessage.trim();\r\n        if (trimmedMessage) {\r\n            // Add new message in Firestore\r\n            messagesRef.add({\r\n                text: trimmedMessage,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid,\r\n                displayName,\r\n                photoURL,\r\n            });\r\n            // Clear input field\r\n            setNewMessage('');\r\n        }\r\n    };\r\n\r\n    const inputRef = useRef();\r\n    useEffect(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [inputRef]);\r\n    \r\n    \r\n    return (\r\n        <>\r\n       <meta name =\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\r\n            <ul>\r\n                {messages.map(message => (\r\n                    <li key={message.id}>\r\n                        <Message {...message} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <section>\r\n            <form \r\n\r\n                onSubmit={handleOnSubmit}>\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={handleMessageOnChange}\r\n                    placeholder=\"Escribe tu mensaje aqui...\"\r\n                    \r\n                />\r\n                \r\n                \r\n                <button\r\n                    class=\" enviar\"\r\n                    type=\"submit\"\r\n                    disabled={!newMessage}\r\n                >\r\n                    <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"30\"\r\n              height=\"30\"\r\n              fill=\"currentColor\"\r\n              class=\"bi bi-cursor-fill\"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n                <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\" />\r\n            </svg>\r\n        </button>\r\n            \r\n            </form>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Channel;\r\n\r\n    \r\n    \r\n\r\n\r\n","import{\r\n  googleAuthProvider,\r\n  firebase\r\n}from '../config/firebase';\r\n\r\nconst signInWithGoogle = async ()=>{\r\n    firebase.auth().useDeviceLanguage();\r\n    try {\r\n      await firebase.auth().signInWithPopup(googleAuthProvider);\r\n    }catch (e){\r\n      console.error(e.message);\r\n    }\r\n  }\r\nexport default signInWithGoogle;","import {firebase} from '../config/firebase';\r\n\r\nconst signOut = async () => {\r\n    try {\r\n        await firebase.auth().signOut();\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\nexport default signOut;","import { useEffect, useState } from \"react\";\r\n\r\nfunction useAuthState(auth){\r\n    const[initializing, setInitializing]= useState(true);\r\n    const[user, setUser] = useState(()=> auth.currentUser);\r\n\r\n    useEffect(() =>{\r\n        const unsubscribe = auth.onAuthStateChanged(user =>{\r\n            if (user) {\r\n                setUser(user);\r\n            } else {\r\n                setUser(false);\r\n            }\r\n            if (initializing){\r\n                setInitializing(false);\r\n            }\r\n        });\r\n\r\n        //Cleanup subscription\r\n        return unsubscribe;\r\n    },[auth, initializing]);\r\n  \r\n    return { user, initializing};\r\n}\r\n\r\nexport default useAuthState;","import {Button, Channel} from './components';\r\nimport {signInWithGoogle, signOut} from './login';\r\nimport {useAuthState} from './hooks';\r\nimport { firebase } from './config/firebase';\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n  const {user, initializing} = useAuthState(firebase.auth());\r\n\r\n  const renderLoading = ()=> {\r\n    if (initializing){\r\n      return <div>\r\n        <h1>Loading ...</h1>\r\n      </div>\r\n    }\r\n  }\r\n  return(\r\n    \r\n    <div class=\"container\">\r\n      {renderLoading()}\r\n      {\r\n        user ? (\r\n          \r\n          <>\r\n          <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0\" crossorigin=\"anonymous\"></link>\r\n         \r\n          <center>\r\n          \r\n          \r\n          <header><h3>3487-CHAT</h3><Button onClick={signOut} class=\"cerrar\"> Logout Google</Button></header>\r\n     \r\n          \r\n          <div class=\"contenedor\">\r\n         \r\n          \r\n          <h4 class=\"ben\">Bienvenidos al Chat!</h4>\r\n          <hr></hr>\r\n          \r\n          <Channel user={user}/>\r\n          </div>\r\n          \r\n            <br></br><br></br><br></br>\r\n          \r\n          </center>\r\n          <br></br>\r\n          \r\n          </>\r\n          \r\n          ):<div class=\"inicio\"><Button onClick={signInWithGoogle}> Sign in with Google</Button></div>\r\n          \r\n        }\r\n        <br></br>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}